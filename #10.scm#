(use gauche.test)
(add-load-path ".")
(load "func")
(load "test-util")

(test-start "chapter 10")
(test-section "new-entry")
(test* "(equal? '((appetizer entree beverage)
                 (patee boeuf vin))
               (new-entry '(appetizer entree beverage)
                          '(patee boeuf vin)))"
       #t
       (equal? '((appetizer entree beverage)
                 (patee boeuf vin))
               (new-entry '(appetizer entree beverage)
                          '(patee boeuf vin))))
(test* "(equal? '((appetizer entree beverage)
                 (beer beer beer))
               (new-entry '(appetizer entree beverage)
                          '(beer beer beer)))"
       #t
       (equal? '((appetizer entree beverage)
                 (beer beer beer))
               (new-entry '(appetizer entree beverage)
                          '(beer beer beer))))
(test* "(equal? '((beverage dessert)
                 ((food is) (number one with us)))
               (new-entry '(beverage dessert)
                          '((food is) (number one with us))))"
       #t
       (equal? '((beverage dessert)
                 ((food is) (number one with us)))
               (new-entry '(beverage dessert)
                          '((food is) (number one with us)))))

(f-test
 (lookup-in-entry ['entree '((appetizer entree beverage)
                           (food tastes good))
                         (lambda (name) name)
                         => 'tastes])
 (lookup-in-table ['entree
                   '(((entree dessert)
                      (spaghetti spumoni))
                     ((appetizer entree beverage)
                      (food tastes good)))
                   (lambda (name) name)
                   => 'spaghetti])
 (apply-closure ['((((u v w)
                     (1 2 3))
                    ((x y z)
                     (4 5 6)))
                   (x y)
                   (cons z x))
                 '((a b c) (d e f))
                 => '(6 a b c)])
 (apply ['((((u v w)
             (1 2 3))
            ((x y z)
             (4 5 6)))
           (x y)
           (cons z x))
         '((a b c) (d e f))
         => '(6 a b c)]))

(apply-closure '((((u v w)
                   (1 2 3))
                  ((x y z)
                   (4 5 6)))
                 (x y)
                 (cons z x))
               '((a b c) (d e f)))

(apply '((((u v w)
           (1 2 3))
          ((x y z)
           (4 5 6)))
         (x y)
         (cons z x))
       '((a b c) (d e f)))
(primitive? '((((u v w)
           (1 2 3))
          ((x y z)
           (4 5 6)))
         (x y)
         (cons z x)))
(meaning '(add1 1 2) '())
(*application '(add1 1 2) '())
(apply (meaning 'add1 '())
       (evlis '(1 2) '()))
(apply (meaning 'add1 '())
       (evlis '(1 2) '()))

(meaning 'add1 '())
(test-end)
